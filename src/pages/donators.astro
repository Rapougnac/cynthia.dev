---
/*
 * Copyright (c) 2021-2023 Cynthia Rey, All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import GlobalLayout from '../layout/GlobalLayout.astro'
import PageHeader from '../components/PageHeader.astro'
import Donator from '../components/Donator.astro'

import donatorsList from '../components/donators.json'

type Donator = typeof donatorsList['others'][number]

async function processDonators (donator: Donator): Promise<Donator> {
  return {
    name: donator.name,
    pic: donator.pic && await import(`../assets/donators/${donator.pic}.png`).then((m) => m.default),
    date: donator.date,
  }
}

const subscribers = await Promise.all(
  [
    ...donatorsList.diamond,
    ...donatorsList.emerald,
    ...donatorsList.gold,
    ...donatorsList.silver,
    ...donatorsList.bronze,
  ].map(processDonators)
)

const donators = await Promise.all(donatorsList.others.map(processDonators))
---
<GlobalLayout title="donators - cynthia's website">
  <PageHeader>
    Donators hall of fame
  </PageHeader>
  <main>
    <section class='section'>
      Massive thanks to everyone who donated to me. It means a lot, no matter the amount!
    </section>
    <section class='section'>
      <h3 class='underlined'>subscribers</h3>
      <div class='donators'>
        {subscribers.map(({ name, pic, date }) => <Donator name={name} pic={pic} date={date}/>)}
      </div>
    </section>
    <section class='section'>
      <h3 class='underlined'>one-time & past subscribers</h3>
      <div class='donators'>
        {donators.map(({ name, pic, date }) => <Donator name={name} pic={pic} date={date}/>)}
      </div>
    </section>
  </main>
</GlobalLayout>
